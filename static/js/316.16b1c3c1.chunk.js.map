{"version":3,"file":"static/js/316.16b1c3c1.chunk.js","mappings":"kSA0BA,EAtBmB,WACjB,OAA4BA,EAAAA,EAAAA,MAAnBC,GAAT,eAMA,OACE,kBAAMC,SALe,SAAAC,GACrBA,EAAMC,iBACNH,EAAgB,CAAEI,MAAOF,EAAMG,cAAcC,YAAYC,OAC1D,EAEC,WACE,kBACEC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,KAAK,iBAEP,mBAAQJ,KAAK,SAAb,UACE,SAAC,MAAD,QAIP,ECoCD,EAnDmB,WACjB,OAA4BK,EAAAA,EAAAA,UAAS,CAAC,GAAtC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAuBpB,EAAAA,EAAAA,MAEjBqB,GAFN,eAEiCC,IAAI,SAyBrC,OAvBAC,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CACA,IAAMG,EAAW,mCAAG,2FAClBJ,EAAS,IACTF,GAAa,GAFK,mBAIGO,EAAAA,EAAAA,IAAeJ,GAJlB,OAIVK,EAJU,OAKhBV,EAAUU,GALM,gDAOhBN,EAAS,wBAPO,yBAShBF,GAAa,GATG,4EAAH,qDAajBM,GAdwB,CAezB,GAAE,CAACH,KAEJE,EAAAA,EAAAA,YAAU,WACHJ,GACLQ,EAAAA,GAAAA,MAAYR,EACb,GAAE,CAACA,KAGF,iCACE,+BACE,eACES,MAAO,CACLC,OAAQ,IACRC,UAAW,SACXC,WAAY,OACZC,cAAe,QALnB,iCAUA,SAAC,EAAD,OAEDf,IAAa,SAACgB,EAAA,EAAD,CAAYC,MAAM,UAAUC,KAAM,MAC/CpB,EAAOqB,OAAS,IAAMnB,IAAa,SAACoB,EAAA,EAAD,CAAUtB,OAAQA,MAG3D,C,2DCvCD,IAlBiB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACZuB,GAAWC,EAAAA,EAAAA,MACjB,OACQ,OAANxB,QAAM,IAANA,OAAA,EAAAA,EAAQqB,QAAS,IACf,wBACGrB,EAAOyB,KAAI,YAA6B,IAA1BC,EAAyB,EAAzBA,eAAgBC,EAAS,EAATA,GAC7B,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,GAAME,MAAO,CAAEC,KAAMP,GAA1C,SACGG,KAFIC,EAMZ,KAIR,C,+LClBDI,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGJ,IAAMC,EAAgB,mCAAG,sGACPF,EAAAA,EAAAA,IAAU,wBADH,uBACtBpB,EADsB,EACtBA,KADsB,kBAEvBA,EAAKuB,SAFkB,2CAAH,qDAKhBxB,EAAc,mCAAG,WAAMyB,GAAN,yFACLJ,EAAAA,EAAAA,IAAA,8BAAiCI,IAD5B,uBACpBxB,EADoB,EACpBA,KADoB,kBAErBA,EAAKuB,SAFgB,2CAAH,sDAKdE,EAAa,mCAAG,WAAMT,GAAN,yFACJI,EAAAA,EAAAA,IAAA,iBAAoBJ,IADhB,uBACnBhB,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,sDAKb0B,EAAO,mCAAG,WAAMV,GAAN,yFACEI,EAAAA,EAAAA,IAAA,iBAAoBJ,EAApB,aADF,uBACbhB,EADa,EACbA,KADa,kBAEdA,EAAK2B,MAFS,2CAAH,sDAKPC,EAAU,mCAAG,WAAMZ,GAAN,yFACDI,EAAAA,EAAAA,IAAA,iBAAoBJ,EAApB,aADC,uBAChBhB,EADgB,EAChBA,KADgB,kBAEjBA,EAAKuB,SAFY,2CAAH,qD","sources":["components/SearchForm/SearchForm.jsx","Pages/MoviesPage/MoviesPage.jsx","components/FilmList/FilmList.jsx","components/services/api.js"],"sourcesContent":["import { useSearchParams } from 'react-router-dom';\n\nimport { ImSearch } from 'react-icons/im';\n\nconst SearchForm = () => {\n  const [, setSearchParams] = useSearchParams();\n\n  const onSearchSubmit = event => {\n    event.preventDefault();\n    setSearchParams({ query: event.currentTarget.movieSearch.value });\n  };\n  return (\n    <form onSubmit={onSearchSubmit}>\n      <input\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movies\"\n        name=\"movieSearch\"\n      />\n      <button type=\"submit\">\n        <ImSearch />\n      </button>\n    </form>\n  );\n};\nexport default SearchForm;\n","import React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { PuffLoader } from 'react-spinners';\nimport { toast } from 'react-toastify';\n\nimport { getQueryMovies } from 'components/services/api';\nimport FilmList from 'components/FilmList/FilmList';\nimport SearchForm from 'components/SearchForm/SearchForm';\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [searchParams] = useSearchParams();\n\n  const searchQuery = searchParams.get('query');\n\n  useEffect(() => {\n    if (!searchQuery) return;\n    const fetchMovies = async () => {\n      setError('');\n      setIsLoading(true);\n      try {\n        const data = await getQueryMovies(searchQuery);\n        setMovies(data);\n      } catch (error) {\n        setError('something went wrong');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovies();\n  }, [searchQuery]);\n\n  useEffect(() => {\n    if (!error) return;\n    toast.error(error);\n  }, [error]);\n\n  return (\n    <>\n      <header>\n        <h1\n          style={{\n            margin: '0',\n            textAlign: 'center',\n            paddingTop: '10px',\n            paddingBottom: '10px',\n          }}\n        >\n          SEARCH MOVIES PAGE\n        </h1>\n        <SearchForm />\n      </header>\n      {isLoading && <PuffLoader color=\"#36d7b7\" size={200} />}\n      {movies.length > 0 && !isLoading && <FilmList movies={movies} />}\n    </>\n  );\n};\nexport default MoviesPage;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst FilmList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    movies?.length > 0 && (\n      <ul>\n        {movies.map(({ original_title, id }) => {\n          return (\n            <li key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                {original_title}\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    )\n  );\n};\nexport default FilmList;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: '2db21389930b520d8ed134be7fb3bbe4',\n};\n\nexport const getInitialMovies = async () => {\n  const { data } = await axios.get('/trending/movie/week');\n  return data.results;\n};\n\nexport const getQueryMovies = async movie => {\n  const { data } = await axios.get(`/search/movie?query=${movie}`);\n  return data.results;\n};\n\nexport const getMoviesById = async id => {\n  const { data } = await axios.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getCast = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits`);\n  return data.cast;\n};\n\nexport const getReviews = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews`);\n  return data.results;\n};\n"],"names":["useSearchParams","setSearchParams","onSubmit","event","preventDefault","query","currentTarget","movieSearch","value","type","autoComplete","autoFocus","placeholder","name","useState","movies","setMovies","isLoading","setIsLoading","error","setError","searchQuery","get","useEffect","fetchMovies","getQueryMovies","data","toast","style","margin","textAlign","paddingTop","paddingBottom","PuffLoader","color","size","length","FilmList","location","useLocation","map","original_title","id","to","state","from","axios","api_key","getInitialMovies","results","movie","getMoviesById","getCast","cast","getReviews"],"sourceRoot":""}